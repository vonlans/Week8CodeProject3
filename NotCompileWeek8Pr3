package courseProject;

import java. util.Scanner;



class InvalidTransactionException extends Exception {

    public InvalidTransactionException(String message) {

        super(message);

    }

}


public abstract class Account {
	 
    //private String accountNumber; 
    //private String accountType; 
	
	protected double serviceFee;
    protected double interestRate;  
    protected double overdraftFee;  
    
   /* private double serviceFee;   
    private double interestRate;  
    private double overdraftFee;   
    private double balance; */
    
    //new code
    protected String accountNumber;

    protected String accountType;

    protected double balance;

    public abstract void withdrawal(double amount) throws InvalidTransactionException;

    public abstract void deposit(double amount) throws InvalidTransactionException;

    public abstract double balance();
    
    
    public Account(String accountNumber, String accountType, double serviceFee, double interestRate, double overdraftFee) {
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.serviceFee = serviceFee;
        this.interestRate = interestRate;
        this.overdraftFee = overdraftFee;
        this.balance = 0.0; // double, initially zero
    }

    public String getAccountNumber() {
        return accountNumber;
    }
    
    public String getAccountType() {
        return accountType;
    }

    
    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }
    
    public double getServiceFee() {
        return serviceFee;
    }

    
    public void setServiceFee(double serviceFee) {
        this.serviceFee = serviceFee;
    }

    
    public double getInterestRate() {
        return interestRate;
    }
    
    public void setInterestRate(double interestRate) {
        this.interestRate = interestRate;
    }
    
    public double getOverdraftFee() {
        return overdraftFee;
    }

    
    public void setOverdraftFee(double overdraftFee) {
        this.overdraftFee = overdraftFee;
    }
    
    public double getBalance() {
        return balance;
    }

    
    public void setBalance(double balance) {
        this.balance = balance;
    }
}
-----------------------------------------------------------------------------------------------------------------------------
package courseProject;



class CheckingAccount extends Account {

    public CheckingAccount(String accountNumber, String accountType, double serviceFee, double interestRate,
			double overdraftFee) {
		super(accountNumber, accountType, serviceFee, interestRate, overdraftFee);
	       this.accountNumber = accountNumber;

	        this.accountType = accountType;

	        this.balance = 0.0;
	}
	private String transactionDate;

    private String transactionType;

    private double transactionAmount;

    private static final double SERVICE_FEE = 0.50;

    private static final double INTEREST_RATE = 0.02;

    
    {

    }
    
    @Override

    public void withdrawal(double amount) throws InvalidTransactionException {

        if (amount > balance) {

            throw new InvalidTransactionException("Insufficient funds for withdrawal");

        }

        balance -= amount;
        
        balance -= SERVICE_FEE;

        applyInterest();

    }

    @Override

    public void deposit(double amount) throws InvalidTransactionException {

        if (amount <= 0) {

            throw new InvalidTransactionException("Deposit amount must be greater than zero");

        }

        balance += amount;
        balance -= SERVICE_FEE;

        applyInterest();

    }

    @Override

    public double balance() {

        return balance;

    }
    private void applyInterest() {

        balance += balance * INTEREST_RATE;

    }

}
--------------------------------------------------------------------------------------------------------------------
package courseProject;

class SavingsAccount extends Account {

    public SavingsAccount(String accountNumber, String accountType, double serviceFee, double interestRate,
			double overdraftFee) {
		super(accountNumber, accountType, serviceFee, interestRate, overdraftFee);
        this.accountNumber = accountNumber;
        this.accountType = accountType;

        this.balance = 0.0;
	}
	private String transactionDate;

    private String transactionType;

    private double transactionAmount;

    private static final double SERVICE_FEE = 0.25;

    private static final double INTEREST_RATE = 0.05;
    


    @Override

    public void withdrawal(double amount) throws InvalidTransactionException {

        if (amount > balance) {

            throw new InvalidTransactionException("Insufficient funds for withdrawal");

        }
        balance -= amount;

        balance -= SERVICE_FEE;

        applyInterest();

    }

    @Override

    public void deposit(double amount) throws InvalidTransactionException {

        if (amount <= 0) {

            throw new InvalidTransactionException("Deposit amount must be greater than zero");

        }
        balance += amount;

        balance -= SERVICE_FEE;

        applyInterest();

    }

    @Override

    public double balance() {

        return balance;

    }
    private void applyInterest() {

        balance += balance * INTEREST_RATE;

    }

}
---------------------------------------------------------------------------------------------------------------------------------
package courseProject;

public interface AccountInterface {
    void withdrawal();
    void deposit();
    void balance();
}
-----------------------------------------------------------------------------------------------------
package courseProject;

import java.util.Scanner;

public class BankAcctApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
      
        // Create CheckingAccount

        CheckingAccount checkingAccount = null;

        try {

            checkingAccount = createCheckingAccount(scanner);

        } catch (InvalidTransactionException e) {

            System.out.println(e.getMessage());

        }
        // Create SavingsAccount

        SavingsAccount savingsAccount = null;

        try {

            savingsAccount = createSavingsAccount(scanner);

        } catch (InvalidTransactionException e) {

            System.out.println(e.getMessage());

        }
        
        // Example transactions

        try {

            checkingAccount.deposit(100.0);

            checkingAccount.withdrawal(50.0);

            savingsAccount.deposit(200.0);

            savingsAccount.withdrawal(150.0);

            // Display balances

            System.out.println("Checking Account Balance: $" + checkingAccount.balance());

            System.out.println("Savings Account Balance: $" + savingsAccount.balance());

        } catch (InvalidTransactionException e) {
            System.out.println(e.getMessage());

        }

    }

    private static CheckingAccount createCheckingAccount(Scanner scanner) throws InvalidTransactionException {

        System.out.println("Creating Checking Account");

        System.out.print("Enter account number: ");

        String accountNumber = scanner.next();

        System.out.print("Enter account type: ");

        String accountType = scanner.next();
        
        System.out.print("Enter service fee: ");
        
        String serviceFee = scanner.next();
        
        System.out.print("Enter interest rate: ");
        
        String interestRate = scanner.next();

        System.out.print("Enter overdraft Fee: ");
        
        String overdraftFee = scanner.next();
        
        return CheckingAccount();

       

    }
    private static CheckingAccount CheckingAccount() {
		// TODO Auto-generated method stub
		return null;
	}

	private static SavingsAccount createSavingsAccount(Scanner scanner) throws InvalidTransactionException {

        System.out.println("Creating Savings Account");

        System.out.print("Enter account number: ");

        String accountNumber = scanner.next();

        System.out.print("Enter account type: ");

        String accountType = scanner.next();
        System.out.print("Enter service fee: ");
        
        String serviceFee = scanner.next();
        
        System.out.print("Enter interest rate: ");
        
        String interestRate = scanner.next();

        System.out.print("Enter overdraft Fee: ");
        
        String overdraftFee = scanner.next();

        return SavingsAccount();

    }

	private static SavingsAccount SavingsAccount() {
		
		return null;
	}

}
        }
        
        //OLD code start here and no longer compiles
        
        Customer customer1 = new Customer();
        
        customer1.setCustomerId(DataEntry.enterStringWithLimit("Enter Customer ID (max 5 chars): ", 5));
        customer1.setCustomerSSN(DataEntry.enterNumericString("Enter Customer SSN (9 digits): ", 9));
        customer1.setLastName(DataEntry.enterStringWithLimit("Enter Last Name (max 20 chars): ", 20));
        customer1.setFirstName(DataEntry.enterStringWithLimit("Enter First Name (max 15 chars): ", 15));
        customer1.setStreet(DataEntry.enterStringWithLimit("Enter Street (max 20 chars): ", 20));
        customer1.setCity(DataEntry.enterStringWithLimit("Enter City (max 20 chars): ", 20));
        customer1.setState(DataEntry.enterStringWithLimit("Enter State (2 chars): ", 2));
        customer1.setZip(DataEntry.enterNumericString("Enter Zip Code (5 digits): ", 5));
        customer1.setPhone(DataEntry.enterNumericString("Enter Phone Number (10 digits): ", 10));
        
        
        
        Customer customer2 = new Customer();
        customer2.setCustomerId(DataEntry.enterStringWithLimit("Enter Customer ID (max 5 chars): ", 5));
        customer2.setCustomerSSN(DataEntry.enterNumericString("Enter Customer SSN (9 digits): ", 9));
        customer2.setLastName(DataEntry.enterStringWithLimit("Enter Last Name (max 20 chars): ", 20));
        customer2.setFirstName(DataEntry.enterStringWithLimit("Enter First Name (max 15 chars): ", 15));
        customer2.setStreet(DataEntry.enterStringWithLimit("Enter Street (max 20 chars): ", 20));
        customer2.setCity(DataEntry.enterStringWithLimit("Enter City (max 20 chars): ", 20));
        customer2.setState(DataEntry.enterStringWithLimit("Enter State (2 chars): ", 2));
        customer2.setZip(DataEntry.enterNumericString("Enter Zip Code (5 digits): ", 5));
        customer2.setPhone(DataEntry.enterNumericString("Enter Phone Number (10 digits): ", 10));
        
        // Display customer info:
        System.out.println("\nCustomer Information 1:");
        System.out.println(customer1);
        System.out.println("\nCustomer Information 2:");
        System.out.println(customer2);
        
        // input validation
        while (true) {
            try {
                
                System.out.print("Enter Account Number (max 5 characters): ");
                String accountNumber = validateStringInput(scanner.nextLine(), 5);

                System.out.print("Enter Account Type (CHK or SAV only): ");
                String accountType = validateAccountType(scanner.nextLine());

                System.out.print("Enter Service Fee (0.00 to 10.00 inclusive): ");
                double serviceFee = validateDoubleInput(scanner.nextLine(), 0.0, 10.0);

                System.out.print("Enter Interest Rate (0.0 to 10.0 inclusive): ");
                double interestRate = validateDoubleInput(scanner.nextLine(), 0.0, 10.0);

                System.out.print("Enter Overdraft Fee: ");
                double overdraftFee = Double.parseDouble(scanner.nextLine());

                
                Account account = new Account(accountNumber, accountType, serviceFee, interestRate, overdraftFee);
                
                System.out.println("Account created successfully:");
                System.out.println("Account Number: " + account.getAccountNumber());
                System.out.println("Account Type: " + account.getAccountType());
                System.out.println("Service Fee: " + account.getServiceFee());
                System.out.println("Interest Rate: " + account.getInterestRate());
                System.out.println("Overdraft Fee: " + account.getOverdraftFee());

                
                break;

            } catch (Exception e) {
                
                System.out.println("Error: " + e.getMessage());
                
            }
        }        scanner.close();
    }
 
    private static String validateStringInput(String input, int maxLength) {
        if (input.isBlank() || input.length() > maxLength) {
            throw new IllegalArgumentException("Invalid input. Please enter a valid value.");
        }
        return input;
    }
    private static String validateAccountType(String input) {
        if (!input.equals("CHK") && !input.equals("SAV")) {
            throw new IllegalArgumentException("Invalid account type. Please enter CHK or SAV.");
        }
        return input;
    }
    private static double validateDoubleInput(String input, double minValue, double maxValue) {
        try {
            double value = Double.parseDouble(input);
            if (value < minValue || value > maxValue) {
                throw new IllegalArgumentException("Invalid input. Please enter a value between " + minValue + " and " + maxValue + ".");
            }
            return value;
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException("Invalid input. Please enter a valid numeric value.");
        }
    }
}

